/*
 * This file is generated by jOOQ.
 */
package generated_jooq.tables;


import generated_jooq.Bysj;
import generated_jooq.Indexes;
import generated_jooq.Keys;
import generated_jooq.tables.records.PostsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Posts extends TableImpl<PostsRecord> {

    private static final long serialVersionUID = -1543052416;

    /**
     * The reference instance of <code>bysj.posts</code>
     */
    public static final Posts POSTS = new Posts();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PostsRecord> getRecordType() {
        return PostsRecord.class;
    }

    /**
     * The column <code>bysj.posts.id</code>.
     */
    public final TableField<PostsRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>bysj.posts.name</code>. ??
     */
    public final TableField<PostsRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "??");

    /**
     * The column <code>bysj.posts.describe</code>. ??
     */
    public final TableField<PostsRecord, String> DESCRIBE = createField(DSL.name("describe"), org.jooq.impl.SQLDataType.VARCHAR(255), this, "??");

    /**
     * The column <code>bysj.posts.pv</code>. ?????
     */
    public final TableField<PostsRecord, Long> PV = createField(DSL.name("pv"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.BIGINT)), this, "?????");

    /**
     * The column <code>bysj.posts.type</code>. ???? 1-??? 0-???
     */
    public final TableField<PostsRecord, Integer> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("1", org.jooq.impl.SQLDataType.INTEGER)), this, "???? 1-??? 0-???");

    /**
     * The column <code>bysj.posts.stick</code>. ???? 0-? 1-?
     */
    public final TableField<PostsRecord, Integer> STICK = createField(DSL.name("stick"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "???? 0-? 1-?");

    /**
     * The column <code>bysj.posts.check</code>. ???? 0-?? 1-??
     */
    public final TableField<PostsRecord, Integer> CHECK = createField(DSL.name("check"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "???? 0-?? 1-??");

    /**
     * The column <code>bysj.posts.user_id</code>. ??Id
     */
    public final TableField<PostsRecord, Long> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "??Id");

    /**
     * The column <code>bysj.posts.created_at</code>. ????
     */
    public final TableField<PostsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "????");

    /**
     * The column <code>bysj.posts.updated_at</code>. ????
     */
    public final TableField<PostsRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "????");

    /**
     * Create a <code>bysj.posts</code> table reference
     */
    public Posts() {
        this(DSL.name("posts"), null);
    }

    /**
     * Create an aliased <code>bysj.posts</code> table reference
     */
    public Posts(String alias) {
        this(DSL.name(alias), POSTS);
    }

    /**
     * Create an aliased <code>bysj.posts</code> table reference
     */
    public Posts(Name alias) {
        this(alias, POSTS);
    }

    private Posts(Name alias, Table<PostsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Posts(Name alias, Table<PostsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Posts(Table<O> child, ForeignKey<O, PostsRecord> key) {
        super(child, key, POSTS);
    }

    @Override
    public Schema getSchema() {
        return Bysj.BYSJ;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.POSTS_POSTS_CHECK_INDEX, Indexes.POSTS_POSTS_NAME_INDEX, Indexes.POSTS_POSTS_UPDATED_AT_INDEX, Indexes.POSTS_POSTS_USER_ID_INDEX, Indexes.POSTS_PRIMARY);
    }

    @Override
    public Identity<PostsRecord, Long> getIdentity() {
        return Keys.IDENTITY_POSTS;
    }

    @Override
    public UniqueKey<PostsRecord> getPrimaryKey() {
        return Keys.KEY_POSTS_PRIMARY;
    }

    @Override
    public List<UniqueKey<PostsRecord>> getKeys() {
        return Arrays.<UniqueKey<PostsRecord>>asList(Keys.KEY_POSTS_PRIMARY);
    }

    @Override
    public Posts as(String alias) {
        return new Posts(DSL.name(alias), this);
    }

    @Override
    public Posts as(Name alias) {
        return new Posts(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Posts rename(String name) {
        return new Posts(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Posts rename(Name name) {
        return new Posts(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Long, String, String, Long, Integer, Integer, Integer, Long, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
