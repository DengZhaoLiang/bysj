/*
 * This file is generated by jOOQ.
 */
package generated_jooq.tables.pojos;


import generated_jooq.tables.interfaces.IBanner;

import java.time.LocalDateTime;

import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Banner implements IBanner {

    private static final long serialVersionUID = -1957655869;

    private Long          id;
    private String        name;
    private String        describe;
    private String        img;
    private Long          blogId;
    private LocalDateTime createdAt;
    private LocalDateTime updatedAt;

    public Banner() {}

    public Banner(IBanner value) {
        this.id = value.getId();
        this.name = value.getName();
        this.describe = value.getDescribe();
        this.img = value.getImg();
        this.blogId = value.getBlogId();
        this.createdAt = value.getCreatedAt();
        this.updatedAt = value.getUpdatedAt();
    }

    public Banner(
        Long          id,
        String        name,
        String        describe,
        String        img,
        Long          blogId,
        LocalDateTime createdAt,
        LocalDateTime updatedAt
    ) {
        this.id = id;
        this.name = name;
        this.describe = describe;
        this.img = img;
        this.blogId = blogId;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
    }

    @Override
    public Long getId() {
        return this.id;
    }

    @Override
    public Banner setId(Long id) {
        this.id = id;
        return this;
    }

    @NotNull
    @Size(max = 255)
    @Override
    public String getName() {
        return this.name;
    }

    @Override
    public Banner setName(String name) {
        this.name = name;
        return this;
    }

    @Override
    public String getDescribe() {
        return this.describe;
    }

    @Override
    public Banner setDescribe(String describe) {
        this.describe = describe;
        return this;
    }

    @NotNull
    @Size(max = 65535)
    @Override
    public String getImg() {
        return this.img;
    }

    @Override
    public Banner setImg(String img) {
        this.img = img;
        return this;
    }

    @NotNull
    @Override
    public Long getBlogId() {
        return this.blogId;
    }

    @Override
    public Banner setBlogId(Long blogId) {
        this.blogId = blogId;
        return this;
    }

    @Override
    public LocalDateTime getCreatedAt() {
        return this.createdAt;
    }

    @Override
    public Banner setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }

    @Override
    public LocalDateTime getUpdatedAt() {
        return this.updatedAt;
    }

    @Override
    public Banner setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Banner other = (Banner) obj;
        if (id == null) {
            if (other.id != null)
                return false;
        }
        else if (!id.equals(other.id))
            return false;
        if (name == null) {
            if (other.name != null)
                return false;
        }
        else if (!name.equals(other.name))
            return false;
        if (describe == null) {
            if (other.describe != null)
                return false;
        }
        else if (!describe.equals(other.describe))
            return false;
        if (img == null) {
            if (other.img != null)
                return false;
        }
        else if (!img.equals(other.img))
            return false;
        if (blogId == null) {
            if (other.blogId != null)
                return false;
        }
        else if (!blogId.equals(other.blogId))
            return false;
        if (createdAt == null) {
            if (other.createdAt != null)
                return false;
        }
        else if (!createdAt.equals(other.createdAt))
            return false;
        if (updatedAt == null) {
            if (other.updatedAt != null)
                return false;
        }
        else if (!updatedAt.equals(other.updatedAt))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.name == null) ? 0 : this.name.hashCode());
        result = prime * result + ((this.describe == null) ? 0 : this.describe.hashCode());
        result = prime * result + ((this.img == null) ? 0 : this.img.hashCode());
        result = prime * result + ((this.blogId == null) ? 0 : this.blogId.hashCode());
        result = prime * result + ((this.createdAt == null) ? 0 : this.createdAt.hashCode());
        result = prime * result + ((this.updatedAt == null) ? 0 : this.updatedAt.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Banner (");

        sb.append(id);
        sb.append(", ").append(name);
        sb.append(", ").append(describe);
        sb.append(", ").append(img);
        sb.append(", ").append(blogId);
        sb.append(", ").append(createdAt);
        sb.append(", ").append(updatedAt);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IBanner from) {
        setId(from.getId());
        setName(from.getName());
        setDescribe(from.getDescribe());
        setImg(from.getImg());
        setBlogId(from.getBlogId());
        setCreatedAt(from.getCreatedAt());
        setUpdatedAt(from.getUpdatedAt());
    }

    @Override
    public <E extends IBanner> E into(E into) {
        into.from(this);
        return into;
    }
}
